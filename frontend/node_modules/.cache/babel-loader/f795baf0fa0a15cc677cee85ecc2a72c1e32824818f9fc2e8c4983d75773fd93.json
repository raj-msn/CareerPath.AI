{"ast":null,"code":"import { intersectCircle } from './intersect/intersect-circle.js';\nimport { intersectEllipse } from './intersect/intersect-ellipse.js';\nimport { intersectPolygon } from './intersect/intersect-polygon.js';\nimport { intersectRect } from './intersect/intersect-rect.js';\nexport { shapes, setShapes };\nvar shapes = {\n  rect,\n  ellipse,\n  circle,\n  diamond\n};\nfunction setShapes(value) {\n  shapes = value;\n}\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert('rect', ':first-child').attr('rx', node.rx).attr('ry', node.ry).attr('x', -bbox.width / 2).attr('y', -bbox.height / 2).attr('width', bbox.width).attr('height', bbox.height);\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n}\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent.insert('ellipse', ':first-child').attr('x', -bbox.width / 2).attr('y', -bbox.height / 2).attr('rx', rx).attr('ry', ry);\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n  return shapeSvg;\n}\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent.insert('circle', ':first-child').attr('x', -bbox.width / 2).attr('y', -bbox.height / 2).attr('r', r);\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = bbox.width * Math.SQRT2 / 2;\n  var h = bbox.height * Math.SQRT2 / 2;\n  var points = [{\n    x: 0,\n    y: -h\n  }, {\n    x: -w,\n    y: 0\n  }, {\n    x: 0,\n    y: h\n  }, {\n    x: w,\n    y: 0\n  }];\n  var shapeSvg = parent.insert('polygon', ':first-child').attr('points', points.map(function (p) {\n    return p.x + ',' + p.y;\n  }).join(' '));\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n  return shapeSvg;\n}","map":{"version":3,"names":["intersectCircle","intersectEllipse","intersectPolygon","intersectRect","shapes","setShapes","rect","ellipse","circle","diamond","value","parent","bbox","node","shapeSvg","insert","attr","rx","ry","width","height","intersect","point","r","Math","max","w","SQRT2","h","points","x","y","map","p","join"],"sources":["/Users/anasshaik/Desktop/Projects/CareerPath.AI/frontend/node_modules/dagre-d3-es/src/dagre-js/shapes.js"],"sourcesContent":["import { intersectCircle } from './intersect/intersect-circle.js';\nimport { intersectEllipse } from './intersect/intersect-ellipse.js';\nimport { intersectPolygon } from './intersect/intersect-polygon.js';\nimport { intersectRect } from './intersect/intersect-rect.js';\n\nexport { shapes, setShapes };\n\nvar shapes = {\n  rect,\n  ellipse,\n  circle,\n  diamond,\n};\n\nfunction setShapes(value) {\n  shapes = value;\n}\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent\n    .insert('rect', ':first-child')\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('width', bbox.width)\n    .attr('height', bbox.height);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent\n    .insert('ellipse', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('rx', rx)\n    .attr('ry', ry);\n\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent\n    .insert('circle', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('r', r);\n\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x: 0, y: -h },\n    { x: -w, y: 0 },\n    { x: 0, y: h },\n    { x: w, y: 0 },\n  ];\n  var shapeSvg = parent.insert('polygon', ':first-child').attr(\n    'points',\n    points\n      .map(function (p) {\n        return p.x + ',' + p.y;\n      })\n      .join(' ')\n  );\n\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}