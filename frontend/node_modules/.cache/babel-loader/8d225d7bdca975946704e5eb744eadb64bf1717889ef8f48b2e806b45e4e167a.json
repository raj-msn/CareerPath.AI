{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds timeout for LLM calls\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`Response received:`, response.status);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API functions\nexport const careerAPI = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/api/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend is not available');\n    }\n  },\n  // Simple chat for testing\n  async chat(message) {\n    try {\n      const response = await api.post('/api/chat', {\n        message\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Failed to get chat response');\n    }\n  },\n  // Full career planning\n  async createCareerPlan(query) {\n    try {\n      const response = await api.post('/api/career-plan', query);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Failed to create career plan');\n    }\n  },\n  // Test backend connection\n  async testConnection() {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      throw new Error('Cannot connect to backend');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","careerAPI","healthCheck","get","Error","chat","post","_error$response2","_error$response2$data","detail","createCareerPlan","query","_error$response3","_error$response3$data","testConnection"],"sources":["/Users/anasshaik/Desktop/Projects/CareerPath.AI/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds timeout for LLM calls\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    console.log(`Response received:`, response.status);\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// API functions\nexport const careerAPI = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/api/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend is not available');\n    }\n  },\n\n  // Simple chat for testing\n  async chat(message) {\n    try {\n      const response = await api.post('/api/chat', { message });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to get chat response');\n    }\n  },\n\n  // Full career planning\n  async createCareerPlan(query) {\n    try {\n      const response = await api.post('/api/career-plan', query);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to create career plan');\n    }\n  },\n\n  // Test backend connection\n  async testConnection() {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      throw new Error('Cannot connect to backend');\n    }\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}