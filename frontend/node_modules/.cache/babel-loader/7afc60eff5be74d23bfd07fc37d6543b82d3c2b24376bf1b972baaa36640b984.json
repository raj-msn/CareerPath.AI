{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds timeout for LLM calls\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`Response received:`, response.status);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API functions\nexport const careerAPI = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/api/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend is not available');\n    }\n  },\n  // Simple chat for testing\n  async chat(message, context = null) {\n    try {\n      const requestBody = {\n        message: message,\n        ...(context && {\n          conversation_history: context.conversation_history,\n          current_learning_path: context.current_learning_path,\n          is_follow_up: context.is_follow_up\n        })\n      };\n      console.log('üåê API: Sending request:', {\n        message: message.substring(0, 50) + '...',\n        has_context: !!context,\n        context_keys: context ? Object.keys(context) : []\n      });\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('üåê API: Received response:', {\n        has_response: !!data.response,\n        has_learning_path: !!(data.data && data.data.learning_path),\n        response_length: data.response ? data.response.length : 0\n      });\n      return data;\n    } catch (error) {\n      console.error('API chat error:', error);\n      throw error;\n    }\n  },\n  // Full career planning\n  async createCareerPlan(currentRole, targetRole, message) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/career-plan`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          current_role: currentRole,\n          target_role: targetRole\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Career plan API error:', error);\n      throw error;\n    }\n  },\n  // Test backend connection\n  async testConnection() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Backend connection test failed:', error);\n      throw new Error(`Backend not available: ${error.message}`);\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","careerAPI","healthCheck","get","Error","chat","context","requestBody","conversation_history","current_learning_path","is_follow_up","substring","has_context","context_keys","Object","keys","fetch","body","JSON","stringify","ok","errorText","text","json","has_response","has_learning_path","learning_path","response_length","length","createCareerPlan","currentRole","targetRole","current_role","target_role","testConnection","statusText"],"sources":["/Users/anasshaik/Desktop/Projects/CareerPath.AI/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds timeout for LLM calls\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    console.log(`Response received:`, response.status);\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// API functions\nexport const careerAPI = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/api/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend is not available');\n    }\n  },\n\n  // Simple chat for testing\n  async chat(message, context = null) {\n    try {\n      const requestBody = {\n        message: message,\n        ...(context && {\n          conversation_history: context.conversation_history,\n          current_learning_path: context.current_learning_path,\n          is_follow_up: context.is_follow_up\n        })\n      };\n\n      console.log('üåê API: Sending request:', {\n        message: message.substring(0, 50) + '...',\n        has_context: !!context,\n        context_keys: context ? Object.keys(context) : []\n      });\n\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      \n      console.log('üåê API: Received response:', {\n        has_response: !!data.response,\n        has_learning_path: !!(data.data && data.data.learning_path),\n        response_length: data.response ? data.response.length : 0\n      });\n\n      return data;\n    } catch (error) {\n      console.error('API chat error:', error);\n      throw error;\n    }\n  },\n\n  // Full career planning\n  async createCareerPlan(currentRole, targetRole, message) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/career-plan`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message,\n          current_role: currentRole,\n          target_role: targetRole\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Career plan API error:', error);\n      throw error;\n    }\n  },\n\n  // Test backend connection\n  async testConnection() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Backend connection test failed:', error);\n      throw new Error(`Backend not available: ${error.message}`);\n    }\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}